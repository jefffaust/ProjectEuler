#define BOOST_TEST_MODULE Euler
#include <boost/test/included/unit_test.hpp>

#include "BigInt.h"

#include <sstream>

BOOST_AUTO_TEST_SUITE( shared )

BOOST_AUTO_TEST_CASE( BigIntConstruction )
{
	BigInt i1;
	BOOST_CHECK_EQUAL(i1, 0);

	BigInt i2(42);
	BOOST_CHECK_EQUAL(i2, 42);
	BOOST_CHECK_EQUAL(i2, BigInt("42"));

	BigInt i3("1234567891011121314151617181920");
	std::ostringstream ostrstr;
	ostrstr << i3;
	BOOST_CHECK_EQUAL(ostrstr.str().c_str(), "1234567891011121314151617181920");

	BigInt i4 = 256;
	BOOST_CHECK_EQUAL(i4, BigInt("256"));

	i4 = 0;
	BOOST_CHECK_EQUAL(i4, BigInt("0"));
	BOOST_CHECK_EQUAL(i4, BigInt(0));
	BOOST_CHECK_EQUAL(i4, BigInt());
}

BOOST_AUTO_TEST_CASE( BigIntAddition )
{
	BigInt i1(1024);
	BigInt i2("1024");
	BOOST_CHECK_EQUAL(i1 + i2, BigInt(2048));

	BigInt i3(9000000000000000000);
	BigInt i4(9000000000000000000);
	BigInt i5 = i3 + i4;
	BOOST_CHECK_EQUAL(i5, BigInt(18000000000000000000));
	i5 = i5 + i5;
	BOOST_CHECK_EQUAL(i5, BigInt("36000000000000000000"));
	i5 += i5;
	BOOST_CHECK_EQUAL(i5, BigInt("72000000000000000000"));
	i5 += i5;
	BOOST_CHECK_EQUAL(i5, BigInt("144000000000000000000"));
	i5 += i5;
	BOOST_CHECK_EQUAL(i5, BigInt("288000000000000000000"));
	i5 += 1;
	BOOST_CHECK_EQUAL(i5, BigInt("288000000000000000001"));
	i5 = 1 + i5;
	BOOST_CHECK_EQUAL(i5, BigInt("288000000000000000002"));

	i5 = 0;
	BOOST_CHECK_EQUAL(i5, BigInt());

	i5 += 0;
	BOOST_CHECK_EQUAL(i5, BigInt());

	i5 += 1;
	BOOST_CHECK_EQUAL(i5, BigInt(1));

	i5 = BigInt("9223372036854775808");
	i5 += i5;
	BOOST_CHECK_EQUAL(i5, BigInt("18446744073709551616"));

	i5 = 854775808;
	i5 += BigInt(1223372036000000000);
	BOOST_CHECK_EQUAL(i5, BigInt(1223372036854775808));
}

BOOST_AUTO_TEST_CASE( BigIntDiv )
{
	BigInt i1(2048);
	i1 /= 10;
	BOOST_CHECK_EQUAL(i1, 204);

	BigInt i2;
	i2 /= 10;
	BOOST_CHECK_EQUAL(i2, 0);

	BigInt i3("100000000000000000000");
	i3 /= 10;
	BOOST_CHECK_EQUAL(i3, BigInt("10000000000000000000"));
	i3 /= 10;
	BOOST_CHECK_EQUAL(i3, BigInt("1000000000000000000"));
	i3 /= 10;
	BOOST_CHECK_EQUAL(i3, BigInt("100000000000000000"));
	i3 /= 10;
	BOOST_CHECK_EQUAL(i3, BigInt("10000000000000000"));
	i3 /= 10;
	BOOST_CHECK_EQUAL(i3, BigInt("1000000000000000"));
	i3 /= 10;
	BOOST_CHECK_EQUAL(i3, BigInt("100000000000000"));

	BigInt i4("18446744073709551616");
	i4 /= 1;
	BOOST_CHECK_EQUAL(i4, BigInt("18446744073709551616"));
	BOOST_CHECK_EQUAL(i4 / 2, BigInt("9223372036854775808"));
	i4 /= 2;
	BOOST_CHECK_EQUAL(i4, BigInt("9223372036854775808"));
	i4 /= 2;
	BOOST_CHECK_EQUAL(i4, BigInt("4611686018427387904"));
}

BOOST_AUTO_TEST_CASE( BigIntMod )
{
	BigInt i0;
	BOOST_CHECK_EQUAL(BigInt() % 1, 0);

	BigInt i1("18446744073709551616");
	BOOST_CHECK_EQUAL(i1 % 2, 0);
	BOOST_CHECK_EQUAL(i1 % 10000, 1616);
}

BOOST_AUTO_TEST_CASE( BigIntAsBool )
{
	BOOST_CHECK(!BigInt());
	BOOST_CHECK(BigInt(1));
	BOOST_CHECK(BigInt("18446744073709551616"));
}

BOOST_AUTO_TEST_CASE( BigIntMultiplication )
{
	BigInt i1(1024);
	i1 *= 2;
	BOOST_CHECK_EQUAL(i1, 2048);

	BigInt i2(100000000000000000);
	i2 *= i2;
	BOOST_CHECK_EQUAL(i2, BigInt("10000000000000000000000000000000000"));
	i2 *= i2;
	BOOST_CHECK_EQUAL(i2, BigInt("100000000000000000000000000000000000000000000000000000000000000000000"));
	i2 *= i2;
	BOOST_CHECK_EQUAL(i2, BigInt("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
	i2 *= 2;
	BOOST_CHECK_EQUAL(i2, BigInt("20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));

	BigInt i3("4611686018427387904");
	i3 *= 2;
	BOOST_CHECK_EQUAL(i3, BigInt("9223372036854775808"));
	i3 *= 2;
	BOOST_CHECK_EQUAL(i3, BigInt("18446744073709551616"));
}

BOOST_AUTO_TEST_CASE( BigIntNumDigits )
{
	BOOST_CHECK_EQUAL(BigInt().numDigits(), 1);
	BOOST_CHECK_EQUAL(BigInt(9).numDigits(), 1);
	BOOST_CHECK_EQUAL(BigInt(10).numDigits(), 2);
	BOOST_CHECK_EQUAL(BigInt(99).numDigits(), 2);
	BOOST_CHECK_EQUAL(BigInt(100).numDigits(), 3);
	BOOST_CHECK_EQUAL(BigInt(999999999999999999).numDigits(), 18);
	BOOST_CHECK_EQUAL(BigInt(1000000000000000000).numDigits(), 19);
}

BOOST_AUTO_TEST_CASE( BigIntComparison )
{
	// Zero
	BOOST_CHECK_LT(BigInt(), 1);
	BOOST_CHECK_LE(BigInt(), 1);
	BOOST_CHECK_LE(BigInt(), 0);
	BOOST_CHECK_GT(1, BigInt());
	BOOST_CHECK_GE(1, BigInt());
	BOOST_CHECK_GE(0, BigInt());

	// Non-Zero
	BOOST_CHECK_LT(BigInt(1024), BigInt(2048));
	BOOST_CHECK_LE(BigInt(2048), 4096);
	BOOST_CHECK_LE(BigInt(2048), 2048);
	BOOST_CHECK_GT(2048, BigInt(1024));
	BOOST_CHECK_GE(4096, BigInt(2048));
	BOOST_CHECK_GE(2048, BigInt(2048));

	// Big
	BOOST_CHECK_LT(BigInt(999999999999999999), 1000000000000000000);
	BOOST_CHECK_LE(BigInt("999888777666555444333222111"), BigInt("1112223334445556667778889990"));
}

BOOST_AUTO_TEST_SUITE_END()
